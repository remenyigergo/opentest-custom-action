package opentest.extension.sample;

import org.getopentest.base.TestAction;

import com.datastax.driver.core.BoundStatement;
import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Cluster.Builder;
import com.datastax.driver.core.Host;
import com.datastax.driver.core.Metadata;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.Statement;
import com.datastax.driver.core.querybuilder.Ordering;
import com.datastax.driver.core.querybuilder.QueryBuilder;

public class GreetUser extends TestAction {

    @Override
    public void run() {
        String userName = this.readStringArgument("userName");

        // This is how you write an entry into the test session's log. The type
        // of entries that can be written are info, error, warning, etc.
        this.log.info(String.format("Hello, %s, welcome to OpenTest!", userName));

        CassandraConnector client = new CassandraConnector();
        client.connect("localhost", 9042);
        Session session = client.getSession();

        Offer offer = new Offer(1, "meat-lover");
        client.insertbookByTitle(offer);
    }

    public class Offer {

        public int offerid;
        public String offertype;

        public Offer(int id, String type) {
            this.offerid = id;
            this.offertype = type;
        }

        public int GetId() {
            return this.offerid;
        }

        public String GetOfferType() {
            return this.offertype;
        }
    }

    public class CassandraConnector {

        private Cluster cluster;

        private Session session;

        public void connect(String node, Integer port) {
            Builder b = Cluster.builder().addContactPoint(node);
            if (port != null) {
                b.withPort(port);
            }
            cluster = b.build();

            session = cluster.connect();
        }

        public Session getSession() {
            return this.session;
        }

        public void close() {
            session.close();
            cluster.close();
        }

        public void insertbookByTitle(Offer offer) {
            StringBuilder sb = new StringBuilder("INSERT INTO ")
                    .append("offers.offer").append("(offerid, offertype) ")
                    .append("VALUES (").append(offer.GetId())
                    .append(", '").append(offer.GetOfferType()).append("');");

            String query = sb.toString();
            session.execute(query);
        }

    }

}
